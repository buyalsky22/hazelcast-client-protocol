{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.encode{% if is_var_sized_list_contains_nullable(param.type)%}_contains_nullable{% endif %}{% if param.nullable  %}_nullable{% endif %}(client_message, {{ snake_case(escape_keyword(param.name)) }}, {{ item_type(lang_name, param.type)}}Codec.encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}_nullable{% endif %}(client_message, {{ snake_case(escape_keyword(param.name)) }}, {{ key_type(lang_name, param.type)}}Codec.encode, {{ value_type(lang_name, param.type) }}Codec.encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}_nullable{% endif %}(client_message, {{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.encode, {{ value_type(lang_name, param.type) }}Codec.encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.encode_nullable(client_message, {{ snake_case(escape_keyword(param.name)) }}, {{ lang_name(param.type)|capital }}Codec.encode)
        {%- else -%}
            {{ lang_name(param.type)|capital }}Codec.encode(client_message, {{ snake_case(escape_keyword(param.name)) }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        {%- if param.type == "List_Data"-%}
        ImmutableLazyDataList(ListMultiFrameCodec.decode{% if is_var_sized_list_contains_nullable(param.type) %}_contains_nullable{% endif %}{% if param.nullable  %}_nullable{% endif %}(iterator, {{ item_type(lang_name, param.type)}}Codec.decode),to_object)
        {%- else -%}
        ListMultiFrameCodec.decode{% if is_var_sized_list_contains_nullable(param.type) %}_contains_nullable{% endif %}{% if param.nullable  %}_nullable{% endif %}(iterator, {{ item_type(lang_name, param.type)}}Codec.decode)
        {%- endif -%}
    {%- elif is_var_sized_entry_list(param.type) -%}
        {%- if param.type == "EntryList_Data_Data"-%}
        ImmutableLazyDataList(EntryListCodec.decode{% if param.nullable  %}_nullable{% endif %}(iterator, {{ key_type(lang_name, param.type)}}Codec.decode, {{ value_type(lang_name, param.type)}}Codec.decode),to_object)
        {%- else -%}
        EntryListCodec.decode{% if param.nullable  %}_nullable{% endif %}(iterator, {{ key_type(lang_name, param.type)}}Codec.decode, {{ value_type(lang_name, param.type)}}Codec.decode)
        {%- endif -%}
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.decode{% if param.nullable  %}_nullable{% endif %}(iterator, {{ key_type(lang_name, param.type)}}Codec.decode, {{ value_type(lang_name, param.type)}}Codec.decode)
    {%- else -%}
        {%- if param.nullable  -%}
            {%- if param.type == "Data" -%}
            to_object(CodecUtil.decode_nullable(iterator, {{ lang_name(param.type)|capital }}Codec.decode))
            {%- else -%}
            CodecUtil.decode_nullable(iterator, {{ lang_name(param.type)|capital }}Codec.decode)
            {%- endif -%}
            {%- else -%}
            {{ lang_name(param.type)|capital }}Codec.decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
from hazelcast.protocol.client_message import ClientMessage, PARTITION_ID_FIELD_OFFSET, RESPONSE_BACKUP_ACKS_FIELD_OFFSET, UNFRAGMENTED_MESSAGE, TYPE_FIELD_OFFSET
import hazelcast.protocol.bits as Bits
from hazelcast.protocol.codec.builtin import *
from hazelcast.protocol.codec.custom import *
from hazelcast.util import ImmutableLazyDataList

"""
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
"""

# Generated("!codec_hash!")

# hex: {{ '0x%06X'|format(method.request.id) }}
REQUEST_MESSAGE_TYPE = {{ method.request.id }}
# hex: {{ '0x%06X'|format(method.response.id) }}
RESPONSE_MESSAGE_TYPE = {{ method.response.id }}
{#FIXED SIZED PARAMETER OFFSET CONSTANTS#}
{% for param in fixed_params(method.request.params) %}
REQUEST_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET = {% if loop.first %}PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
{% else %}
REQUEST_{{to_upper_snake_case(loop.previtem.name)}}_FIELD_OFFSET + Bits.{{loop.previtem.type.upper()}}_SIZE_IN_BYTES
{% endif %}
    {% if loop.last %}
REQUEST_INITIAL_FRAME_SIZE = REQUEST_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET + Bits.{{param.type.upper()}}_SIZE_IN_BYTES
    {% endif %}
{% else %}
REQUEST_INITIAL_FRAME_SIZE = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
{% endfor %}
{% for param in fixed_params(method.response.params) %}
RESPONSE_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET = {% if loop.first %}RESPONSE_BACKUP_ACKS_FIELD_OFFSET + Bits.BYTE_SIZE_IN_BYTES
{% else %}
RESPONSE_{{ to_upper_snake_case(loop.previtem.name)}}_FIELD_OFFSET + Bits.{{loop.previtem.type.upper()}}_SIZE_IN_BYTES
{% endif %}
    {% if loop.last %}

RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET + Bits.{{param.type.upper()}}_SIZE_IN_BYTES
    {% endif %}
{% else %}
RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_BACKUP_ACKS_FIELD_OFFSET + Bits.BYTE_SIZE_IN_BYTES
{% endfor %}
{% for event in method.events%}
    {% for param in fixed_params(event.params) %}
EVENT_{{ to_upper_snake_case(event.name)}}_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET = {% if loop.first %}PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
{% else %}
EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(loop.previtem.name)}}_FIELD_OFFSET + Bits.{{loop.previtem.type.upper()}}_SIZE_IN_BYTES
{% endif %}
    {% if loop.last %}
EVENT_{{ to_upper_snake_case(event.name)}}_INITIAL_FRAME_SIZE = EVENT_{{ to_upper_snake_case(event.name)}}_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET + Bits.{{param.type.upper()}}_SIZE_IN_BYTES
    {% endif %}
    {% else %}
EVENT_{{ to_upper_snake_case(event.name)}}_INITIAL_FRAME_SIZE = PARTITION_ID_FIELD_OFFSET + Bits.INT_SIZE_IN_BYTES
    {% endfor %}
    #hex: {{ '0x%06X'|format(event.id) }}
EVENT_{{ to_upper_snake_case(event.name)}}_MESSAGE_TYPE = {{ event.id }}
{% endfor %}


{#REQUEST_ENCODE#}
def encode_request({% for param in method.request.params %}{{snake_case(escape_keyword(param.name))}}{% if not loop.last %}, {% endif %}{% endfor %}):
    client_message = ClientMessage.create_for_encode()
    client_message.retryable = {{ method.request.retryable }}
    client_message.operation_name = "{{ service_name|capital }}.{{ method.name|capital }}"
    initial_frame = ClientMessage.Frame(bytearray(REQUEST_INITIAL_FRAME_SIZE), UNFRAGMENTED_MESSAGE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, TYPE_FIELD_OFFSET, REQUEST_MESSAGE_TYPE)
    FixedSizeTypesCodec.encode_int(initial_frame.content, PARTITION_ID_FIELD_OFFSET, -1)
{% for param in fixed_params(method.request.params) %}
    FixedSizeTypesCodec.encode_{{ param.type|lower }}(initial_frame.content, REQUEST_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET, {{ snake_case(escape_keyword(param.name)) }})
{% endfor %}
    client_message.add(initial_frame)
{% for param in var_size_params(method.request.params) %}
    {{ encode_var_sized(param) }}
{% endfor %}
    return client_message


{#RESPONSE_DECODE#}
def decode_response(client_message, to_object=None):
    iterator = client_message.frame_iterator()
    response = dict({% for param in method.response.params %}{{ escape_keyword(param.name) }}=None{% if not loop.last %}, {% endif %}{% endfor %})
{% if  fixed_params(method.response.params)|length != 0 %}
    initial_frame = iterator.next()
{% else %}
    #empty initial frame
    iterator.next()
{% endif %}
{% for param in fixed_params(method.response.params) %}
    response["{{ escape_keyword(param.name) }}"] = FixedSizeTypesCodec.decode_{{ param.type|lower}}(initial_frame.content, RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET)
{% endfor %}
{% for param in var_size_params(method.response.params) %}
    response["{{ escape_keyword(param.name) }}"] = {{ decode_var_sized(param) }}
{% endfor %}
    return response


{#HANDLE#}
{% if method.events|length != 0 %}
def handle(client_message{% for event in method.events%}, handle_{{ snake_case(event.name) }}_event=None{% endfor %}, to_object=None):
    message_type = client_message.get_message_type()
    iterator = client_message.frame_iterator()
{% for event in method.events%}
    if message_type == EVENT_{{ to_upper_snake_case(event.name)}}_MESSAGE_TYPE and handle_{{ snake_case(event.name) }}_event is not None:
    {% if  fixed_params(event.params)|length != 0 %}
        initial_frame = iterator.next()
    {% else %}
        #empty initial frame
        iterator.next()
    {% endif %}
    {% for param in fixed_params(event.params) %}
        {{snake_case(escape_keyword(param.name))}} = FixedSizeTypesCodec.decode_{{ param.type|lower }}(initial_frame.content, EVENT_{{ to_upper_snake_case(event.name)}}_{{to_upper_snake_case(param.name)}}_FIELD_OFFSET)
    {% endfor %}
    {% for param in var_size_params(event.params) %}
        {{snake_case(escape_keyword(param.name))}} = {{ decode_var_sized(param) }}
    {% endfor %}
        handle_{{ snake_case(event.name) }}_event({% for param in event.params %}{{snake_case(escape_keyword(param.name))}}={{snake_case(escape_keyword(param.name))}}{% if not loop.last %}, {% endif %}{% endfor %})
{% endfor %}
{% endif %}

